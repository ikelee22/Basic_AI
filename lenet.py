from openvino.inference_engine import IENetwork, IEPlugin
import cv2
import numpy as np

# ---------------------Load A Plugin for Inference Engine-----------------------------------------
# "MYRIAD"
# plugin = IEPlugin("MYRIAD", "/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64")
plugin = IEPlugin("CPU", "/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64")
plugin.add_cpu_extension("/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64/libcpu_extension_sse4.so")
# plugin = IEPlugin("GPU", "/opt/intel/openvino/deployment_tools/inference_engine/lib/intel64")

# --------------------Load IR Generated by ModelOptimizer (.xml and .bin files)------------------------

model_xml = '/home/intel/Desktop/sample/lenet.xml'
model_bin = '/home/intel/Desktop/sample/lenet.bin'
net = IENetwork(model=model_xml, weights=model_bin)

net.layers['data'].precision = 'U8'
#print(net.inputs)
#print(net.outputs)

#input_info = net.getInputsInfo #.begin()->second

# -----------------------------Prepare input blobs-----------------------------------------------------
net.batch_size = 1
input_blob = next(iter(net.inputs))
out_blob = next(iter(net.outputs))

# -------------------------Loading model to the plugin and then infer----------------------------------
exec_net = plugin.load(network=net)
print('-'*50)
idx = input('input number of test img : ')
print('-'*50)
file_path = '/home/intel/sample/img/test{}.jpg'.format(idx)
img = cv2.imread(file_path, cv2.IMREAD_GRAYSCALE)

import matplotlib.pyplot as plt
plt.imshow(img,cmap='gray')
plt.show()

height, width = img.shape
n, c, h, w = net.inputs[input_blob].shape
img2 = img
if height != h or width != w:
	img2 = cv2.resize(img, (w, h))

images = np.ndarray(shape=(n, c, h, w))
images[0] = img2

res = exec_net.infer(inputs={input_blob: images})
probs = res[out_blob]

print('-'*50)
print('Top 10 results:')
print('-'*50)
top_ind = np.argsort(probs)[0][:-10:-1]
for id in top_ind:
	print('label #{} : {:0.2f}'.format(id, probs[0][id]))

del net


